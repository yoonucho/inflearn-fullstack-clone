// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-next';
import type { AppControllerGetHelloData, AppControllerTestUserData, CoursesControllerCreateData, CoursesControllerCreateResponse, CoursesControllerFindAllInstructorCoursesData, CoursesControllerFindAllInstructorCoursesResponse, CoursesControllerFindAllMyCoursesData, CoursesControllerFindAllMyCoursesResponse, CoursesControllerDeleteData, CoursesControllerDeleteResponse, CoursesControllerFindOneData, CoursesControllerFindOneResponse, CoursesControllerUpdateData, CoursesControllerUpdateResponse, CoursesControllerSearchData, CoursesControllerSearchResponse, CoursesControllerRemoveFavoriteData, CoursesControllerRemoveFavoriteResponse, CoursesControllerGetFavoriteData, CoursesControllerGetFavoriteResponse, CoursesControllerAddFavoriteData, CoursesControllerAddFavoriteResponse, CoursesControllerGetMyFavoritesData, CoursesControllerGetMyFavoritesResponse, CoursesControllerEnrollCourseData, CoursesControllerEnrollCourseResponse, CoursesControllerGetLectureActivityData, CoursesControllerGetLectureActivityResponse, CoursesControllerGetCourseReviewsData, CoursesControllerGetCourseReviewsResponse, CoursesControllerCreateReviewData, CoursesControllerCreateReviewResponse, CoursesControllerDeleteReviewData, CoursesControllerUpdateReviewData, CoursesControllerUpdateReviewResponse, CoursesControllerCreateInstructorReplyData, CoursesControllerCreateInstructorReplyResponse, CoursesControllerGetInstructorReviewsData, CoursesControllerGetInstructorReviewsResponse, LecturesControllerCreateData, LecturesControllerCreateResponse, LecturesControllerDeleteData, LecturesControllerDeleteResponse, LecturesControllerFindOneData, LecturesControllerFindOneResponse, LecturesControllerUpdateData, LecturesControllerUpdateResponse, LecturesControllerGetLectureActivityData, LecturesControllerGetLectureActivityResponse, LecturesControllerUpdateLectureActivityData, LecturesControllerUpdateLectureActivityResponse, SectionsControllerCreateData, SectionsControllerCreateResponse, SectionsControllerDeleteData, SectionsControllerDeleteResponse, SectionsControllerFindOneData, SectionsControllerFindOneResponse, SectionsControllerUpdateData, SectionsControllerUpdateResponse, CategoriesControllerFindAllData, CategoriesControllerFindAllResponse, MediaControllerUploadMediaData, UsersControllerGetProfileData, UsersControllerGetProfileResponse, UsersControllerUpdateProfileData, UsersControllerUpdateProfileResponse, CommentsControllerCreateData, CommentsControllerCreateResponse, CommentsControllerRemoveData, CommentsControllerRemoveResponse, CommentsControllerUpdateData, CommentsControllerUpdateResponse, QuestionsControllerFindAllByInstructorIdData, QuestionsControllerFindAllByInstructorIdResponse, QuestionsControllerFindAllData, QuestionsControllerFindAllResponse, QuestionsControllerCreateData, QuestionsControllerCreateResponse, QuestionsControllerRemoveData, QuestionsControllerFindOneData, QuestionsControllerFindOneResponse, QuestionsControllerUpdateData, QuestionsControllerUpdateResponse, CartsControllerClearCartData, CartsControllerClearCartResponse, CartsControllerGetCartItemsData, CartsControllerGetCartItemsResponse, CartsControllerAddToCartData, CartsControllerAddToCartResponse, CartsControllerRemoveFromCartData, CartsControllerRemoveFromCartResponse, PaymentsControllerVerifyPaymentData, PaymentsControllerHandleWebookData, BatchControllerRunPaymentStatsData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const appControllerTestUser = <ThrowOnError extends boolean = false>(options?: Options<AppControllerTestUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user-test',
        ...options
    });
};

export const coursesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const coursesControllerFindAllInstructorCourses = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllInstructorCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllInstructorCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/instructor',
        ...options
    });
};

export const coursesControllerFindAllMyCourses = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllMyCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllMyCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/my',
        ...options
    });
};

export const coursesControllerDelete = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerFindOneResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CoursesControllerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const coursesControllerSearch = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerSearchResponse, unknown, ThrowOnError>({
        url: '/courses/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const coursesControllerRemoveFavorite = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerRemoveFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerRemoveFavoriteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/favorite',
        ...options
    });
};

export const coursesControllerGetFavorite = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerGetFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerGetFavoriteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/favorite',
        ...options
    });
};

export const coursesControllerAddFavorite = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerAddFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerAddFavoriteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/favorite',
        ...options
    });
};

export const coursesControllerGetMyFavorites = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerGetMyFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerGetMyFavoritesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/favorites/my',
        ...options
    });
};

export const coursesControllerEnrollCourse = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerEnrollCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerEnrollCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/enroll',
        ...options
    });
};

export const coursesControllerGetLectureActivity = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerGetLectureActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerGetLectureActivityResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/activity',
        ...options
    });
};

export const coursesControllerGetCourseReviews = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerGetCourseReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerGetCourseReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/reviews',
        ...options
    });
};

export const coursesControllerCreateReview = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/reviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const coursesControllerDeleteReview = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerDeleteReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/{reviewId}',
        ...options
    });
};

export const coursesControllerUpdateReview = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CoursesControllerUpdateReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/{reviewId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const coursesControllerCreateInstructorReply = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateInstructorReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CoursesControllerCreateInstructorReplyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/{reviewId}/instructor-reply',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const coursesControllerGetInstructorReviews = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerGetInstructorReviewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerGetInstructorReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/instructor',
        ...options
    });
};

/**
 * 새 강의 생성
 */
export const lecturesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LecturesControllerCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/sections/{sectionId}/lectures',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 개별 강의 삭제
 */
export const lecturesControllerDelete = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LecturesControllerDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}',
        ...options
    });
};

/**
 * 개별 강의 상세 정보
 */
export const lecturesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LecturesControllerFindOneResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}',
        ...options
    });
};

/**
 * 개별 강의 수정
 */
export const lecturesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LecturesControllerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lecturesControllerGetLectureActivity = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerGetLectureActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LecturesControllerGetLectureActivityResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}/activity',
        ...options
    });
};

export const lecturesControllerUpdateLectureActivity = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerUpdateLectureActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LecturesControllerUpdateLectureActivityResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}/activity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 새 섹션 생성
 */
export const sectionsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SectionsControllerCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/courses/{courseId}/sections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 섹션 삭제
 */
export const sectionsControllerDelete = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SectionsControllerDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/{sectionId}',
        ...options
    });
};

/**
 * 섹션 상세 정보
 */
export const sectionsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SectionsControllerFindOneResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/{sectionId}',
        ...options
    });
};

/**
 * 섹션 업데이트
 */
export const sectionsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SectionsControllerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/{sectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 카테고리 리스트
 */
export const categoriesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CategoriesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CategoriesControllerFindAllResponse, unknown, ThrowOnError>({
        url: '/categories',
        ...options
    });
};

export const mediaControllerUploadMedia = <ThrowOnError extends boolean = false>(options: Options<MediaControllerUploadMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/media',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const usersControllerGetProfile = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/profile',
        ...options
    });
};

export const usersControllerUpdateProfile = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersControllerUpdateProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const commentsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CommentsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CommentsControllerCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/questions/{questionId}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const commentsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CommentsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CommentsControllerRemoveResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/comments/{commentId}',
        ...options
    });
};

export const commentsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CommentsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CommentsControllerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/comments/{commentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const questionsControllerFindAllByInstructorId = <ThrowOnError extends boolean = false>(options?: Options<QuestionsControllerFindAllByInstructorIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuestionsControllerFindAllByInstructorIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/instructor/questions',
        ...options
    });
};

export const questionsControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionsControllerFindAllResponse, unknown, ThrowOnError>({
        url: '/courses/{courseId}/questions',
        ...options
    });
};

export const questionsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuestionsControllerCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/questions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const questionsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/questions/{questionId}',
        ...options
    });
};

export const questionsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionsControllerFindOneResponse, unknown, ThrowOnError>({
        url: '/questions/{questionId}',
        ...options
    });
};

export const questionsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<QuestionsControllerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/questions/{questionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const cartsControllerClearCart = <ThrowOnError extends boolean = false>(options?: Options<CartsControllerClearCartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<CartsControllerClearCartResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts',
        ...options
    });
};

export const cartsControllerGetCartItems = <ThrowOnError extends boolean = false>(options?: Options<CartsControllerGetCartItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CartsControllerGetCartItemsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts',
        ...options
    });
};

export const cartsControllerAddToCart = <ThrowOnError extends boolean = false>(options: Options<CartsControllerAddToCartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CartsControllerAddToCartResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const cartsControllerRemoveFromCart = <ThrowOnError extends boolean = false>(options: Options<CartsControllerRemoveFromCartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CartsControllerRemoveFromCartResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts/{courseId}',
        ...options
    });
};

export const paymentsControllerVerifyPayment = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerVerifyPaymentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentsControllerHandleWebook = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerHandleWebookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/payments/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const batchControllerRunPaymentStats = <ThrowOnError extends boolean = false>(options: Options<BatchControllerRunPaymentStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/admin/batch/payment-stats',
        ...options
    });
};